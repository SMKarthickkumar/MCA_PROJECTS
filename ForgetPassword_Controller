using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using System.Net.Mail;
using System.Text;

namespace Garments.Controllers
{
    public class ForgetPasswordController : Controller
    {
        //
        // GET: /ForgetPassword/
        public ActionResult Index()
        {
            return View();
        }

        string strcon = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;

        [HttpPost]
        public JsonResult UpdateToken(string EmailId, string URL)
        {
            try
            {
                string Token = RandomString(10);
                using (SqlConnection con = new SqlConnection(strcon))
                {
                    DataTable dt = new DataTable();
                    con.Open();
                    SqlCommand cmd = new SqlCommand("spUpdateToken", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@UserName", EmailId);
                    cmd.Parameters.AddWithValue("@Token", Token);
                    SqlDataAdapter ad = new SqlDataAdapter(cmd);
                    con.Close();
                    ad.Fill(dt);
                    if (Convert.ToInt32(dt.Rows[0]["Count"].ToString()) == 0)
                    {
                        return Json("Invalid EmailId", JsonRequestBehavior.AllowGet);
                    }
                }
                SmtpClient client = new SmtpClient();
                client.Port = 587;
                client.Host = "smtp.gmail.com";
                client.EnableSsl = true;
                client.Timeout = 10000;
                client.DeliveryMethod = SmtpDeliveryMethod.Network;
                client.UseDefaultCredentials = false;
                client.Credentials = new System.Net.NetworkCredential("murukesh.s@megsoft.co.in", "password");
                string Subject = "Forget password";
                string Body = "Are you want to Change the password click here :" + URL + Token;
                MailMessage mm = new MailMessage("murukeshhh@gmail.com", EmailId, Subject, Body);
                mm.BodyEncoding = UTF8Encoding.UTF8;
                mm.DeliveryNotificationOptions = DeliveryNotificationOptions.OnFailure;

                client.Send(mm);

                return Json("Success", JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(ex.Message, JsonRequestBehavior.AllowGet);
            }
        }

        private static Random random = new Random();
        public static string RandomString(int length)
        {
            const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
            return new string(Enumerable.Repeat(chars, length)
              .Select(s => s[random.Next(s.Length)]).ToArray());
        }
		
        [HttpPost]
        public JsonResult UpdatePassword(string Token, string Password, string UserName)
        {
            try
            {
                using (SqlConnection con = new SqlConnection(strcon))
                {
                    DataTable dt = new DataTable();
                    con.Open();
                    SqlCommand cmd = new SqlCommand("spUpdatePassword", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@Token", Token);
                    cmd.Parameters.AddWithValue("@Password", Password);
                    cmd.Parameters.AddWithValue("@UserName", UserName);
                    SqlDataAdapter ad = new SqlDataAdapter(cmd);
                    con.Close();
                    ad.Fill(dt);
                    if (Convert.ToInt32(dt.Rows[0]["Count"].ToString()) == 0)
                    {
                        return Json("Invalid EmailId or token", JsonRequestBehavior.AllowGet);
                    }
                }
                return Json("Success", JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(ex.Message, JsonRequestBehavior.AllowGet);
            }
        }
	}
}
