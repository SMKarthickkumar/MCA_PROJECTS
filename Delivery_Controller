using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using Garments.Models;

namespace Garments.Controllers
{
    public class DeliveryController : Controller
    {
        // GET: /Delivery/
        public ActionResult Index()
        {
            return View();
        }

        string strcon = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;

        public JsonResult SaveDelivery(Delivery Deliveryobj)
        {
            try
            {
                using (SqlConnection con = new SqlConnection(strcon))
                {
                    con.Open();
                    SqlCommand cmd = new SqlCommand("SaveDelivery", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@Action", Deliveryobj.Action);
                    cmd.Parameters.AddWithValue("@Id", Deliveryobj.Id);
                    cmd.Parameters.AddWithValue("@ProductId", Deliveryobj.ProductId);
                    cmd.Parameters.AddWithValue("@CustomerName", Deliveryobj.CustomerName);
                    cmd.Parameters.AddWithValue("@DateOfDelivery", Deliveryobj.DateOfDelivery);
                    cmd.Parameters.AddWithValue("@Count", Deliveryobj.Count);
                    cmd.Parameters.AddWithValue("@Amount", Deliveryobj.Amount);
                    cmd.ExecuteNonQuery();
                }
                return Json("Success", JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(ex.Message, JsonRequestBehavior.AllowGet);
            }
        }


        [HttpPost]
        public JsonResult GetDeliveryInfo()
        {
            try
            {
                List<Delivery> Delivery = new List<Delivery>();
                using (SqlConnection con = new SqlConnection(strcon))
                {
                    DataSet ds = new DataSet();
                    SqlCommand cmd = new SqlCommand("GetDeliveryInfo", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    con.Open();
                    SqlDataAdapter ad = new SqlDataAdapter(cmd);
                    ad.Fill(ds);
                    con.Close();
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        Delivery DeliV = new Delivery();
                        DeliV.Id = Convert.ToInt32(ds.Tables[0].Rows[i]["Id"]);
                        //Pack.ProductId = Convert.ToInt32(ds.Tables[0].Rows[i]["ProductId"]);
                        DeliV.ProductId = ds.Tables[0].Rows[i]["ProductId"].ToString();
                        DeliV.CustomerName = ds.Tables[0].Rows[i]["CustomerName"].ToString();
                        DeliV.DateOfDelivery = ds.Tables[0].Rows[i]["DateOfDelivery"].ToString();
                       // DeliV.DateOfEnd = ds.Tables[0].Rows[i]["DateOfEnd"].ToString();
                        DeliV.Count = Convert.ToInt32(ds.Tables[0].Rows[i]["Count"]);
                        DeliV.Amount = Convert.ToInt32(ds.Tables[0].Rows[i]["Amount"]);
                        Delivery.Add(DeliV);
                    }
                }
                return Json(Delivery, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(ex.Message, JsonRequestBehavior.AllowGet);
            }
        }


        [HttpPost]
        public JsonResult GetDetailById(int Id)
        {
            try
            {
                List<Delivery> Delivery = new List<Delivery>();
                SqlDataReader rd;
                using (SqlConnection con = new SqlConnection(strcon))
                {
                    SqlCommand cmd = new SqlCommand("GetDetailByIdD", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@Id", Id);
                    con.Open();
                    rd = cmd.ExecuteReader();

                    if (rd.HasRows)
                    {
                        while (rd.Read())
                        {
                            Delivery DeliV = new Delivery();
                            //Packobj.Id = Convert.ToInt32(rd["Id"].ToString());
                            DeliV.Id = Convert.ToInt32(rd["Id"].ToString());
                            //Packobj.ProductId = Convert.ToInt32(rd["ProductId"].ToString());
                            DeliV.ProductId = rd["ProductId"].ToString();
                            DeliV.CustomerName = rd["CustomerName"].ToString();
                            DeliV.DateOfDelivery = rd["DateOfDelivery"].ToString();
                            DeliV.Count = Convert.ToInt32(rd["Count"].ToString());
                            DeliV.Amount = Convert.ToInt32(rd["Amount"].ToString());
                            Delivery.Add(DeliV);
                        }
                    }
                    con.Close();
                }
                var Result = new { Status = "Success", List = Delivery };
                return Json(Result, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                var Result = new { Status = "Error", Error = ex.Message };
                return Json(Result, JsonRequestBehavior.AllowGet);
            }
        }


        [HttpPost]
        public JsonResult DeleteDetails(int Id)
        {
            try
            {
                using (SqlConnection con = new SqlConnection(strcon))
                {
                    con.Open();
                    SqlCommand cmd = new SqlCommand("DeleteByIdD", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@Id", Id);
                    cmd.ExecuteNonQuery();
                    con.Close();
                }
                var Result = new { Status = "Success" };
                return Json(Result, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                var Result = new { Status = "Error", Error = ex.Message };
                return Json(Result, JsonRequestBehavior.AllowGet);
            }
        }
	}
}
