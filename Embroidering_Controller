using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Data;
using System.Data.SqlClient;
using System.Configuration;
using Garments.Models;

namespace Garments.Controllers
{
    public class EmbroideringController : Controller
    {
        // GET: /Embroidering/
        public ActionResult Index()
        {
            return View();
        }

        string strcon = ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString;
		// Save information in database
        public JsonResult SaveEmbroidering(Embroidering Embroiderobj)
        {
            try
            {
                using (SqlConnection con = new SqlConnection(strcon))
                {
                    con.Open();
                    SqlCommand cmd = new SqlCommand("SaveEmbroidering", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@Action", Embroiderobj.Action);
                    cmd.Parameters.AddWithValue("@Id", Embroiderobj.Id);
                    cmd.Parameters.AddWithValue("@ProductId", Embroiderobj.ProductId);
                    cmd.Parameters.AddWithValue("@CustomerName", Embroiderobj.CustomerName);
                    cmd.Parameters.AddWithValue("@DateOfStart", Embroiderobj.DateOfStart);
                    cmd.Parameters.AddWithValue("@DateOfEnd", Embroiderobj.DateOfEnd);
                    cmd.Parameters.AddWithValue("@Count", Embroiderobj.Count);
                    cmd.ExecuteNonQuery();
                }
                return Json("Success", JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(ex.Message, JsonRequestBehavior.AllowGet);
            }
        }

		// get all information from the database
        public JsonResult GetEmbroideringInfo()
        {
            try
            {
                List<Embroidering> Embroidering = new List<Embroidering>();
                using (SqlConnection con = new SqlConnection(strcon))
                {
                    DataSet ds = new DataSet();
                    SqlCommand cmd = new SqlCommand("GetEmbroideringInfo", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    con.Open();
                    SqlDataAdapter ad = new SqlDataAdapter(cmd);
                    ad.Fill(ds);
                    con.Close();
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        Embroidering Embroider = new Embroidering();
                        Embroider.Id = Convert.ToInt32(ds.Tables[0].Rows[i]["Id"]);
                        //Pack.ProductId = Convert.ToInt32(ds.Tables[0].Rows[i]["ProductId"]);
                        Embroider.ProductId = ds.Tables[0].Rows[i]["ProductId"].ToString();
                        Embroider.CustomerName = ds.Tables[0].Rows[i]["CustomerName"].ToString();
                        Embroider.DateOfStart = ds.Tables[0].Rows[i]["DateOfStart"].ToString();
                        Embroider.DateOfEnd = ds.Tables[0].Rows[i]["DateOfEnd"].ToString();
                        Embroider.Count = Convert.ToInt32(ds.Tables[0].Rows[i]["Count"]);

                        Embroidering.Add(Embroider);
                    }
                }
                return Json(Embroidering, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(ex.Message, JsonRequestBehavior.AllowGet);
            }
        }

		// get by id value
        [HttpPost]
        public JsonResult GetDetailById(int Id)
        {
            try
            {
                List<Embroidering> Embroidering = new List<Embroidering>();
                SqlDataReader rd;
                using (SqlConnection con = new SqlConnection(strcon))
                {
                    SqlCommand cmd = new SqlCommand("GetDetailByIdE", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@Id", Id);
                    con.Open();
                    rd = cmd.ExecuteReader();

                    if (rd.HasRows)
                    {
                        while (rd.Read())
                        {
                            Embroidering Embobj = new Embroidering();
                            //Packobj.Id = Convert.ToInt32(rd["Id"].ToString());
                            Embobj.Id = Convert.ToInt32(rd["Id"].ToString());
                            //Packobj.ProductId = Convert.ToInt32(rd["ProductId"].ToString());
                            Embobj.ProductId = rd["ProductId"].ToString();
                            Embobj.CustomerName = rd["CustomerName"].ToString();
                            Embobj.DateOfStart = rd["DateOfStart"].ToString();
                            Embobj.DateOfEnd = rd["DateOfEnd"].ToString();
                            Embobj.Count = Convert.ToInt32(rd["Count"].ToString());
                            Embroidering.Add(Embobj);
                        }
                    }
                    con.Close();
                }
                var Result = new { Status = "Success", List = Embroidering };
                return Json(Result, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                var Result = new { Status = "Error", Error = ex.Message };
                return Json(Result, JsonRequestBehavior.AllowGet);
            }
        }
		// Delete by id value
        [HttpPost]
        public JsonResult DeleteDetails(int Id)
        {
            try
            {
                using (SqlConnection con = new SqlConnection(strcon))
                {
                    con.Open();
                    SqlCommand cmd = new SqlCommand("DeleteByIdE", con);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@Id", Id);
                    cmd.ExecuteNonQuery();
                    con.Close();
                }
                var Result = new { Status = "Success" };
                return Json(Result, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                var Result = new { Status = "Error", Error = ex.Message };
                return Json(Result, JsonRequestBehavior.AllowGet);
            }
        }
	}
}
